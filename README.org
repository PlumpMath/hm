# :tangle yes
#+NAME: py0
#+BEGIN_SRC python
import hrpyc
connection, hou = hrpyc.import_remote_module()
#+END_SRC

#+RESULTS: py0

#+NAME: hy0
#+BEGIN_SRC hy
(import hrpyc)
(setv (, connection hou) (hrpyc.import_remote_module))
#+END_SRC

#+RESULTS: hy0
: None



#+RESULTS:
: >>> >>> >>> >>> >>>



* Python Scripting
http://www.sidefx.com/docs/houdini/hom/index.html
Python과 Houdini Object Model을 사용하여 Houdini를 스크립팅하는 방법.

+ Overview
Houdini Object Model(HOM)은 Python스크립팅 언어를 사용하여,
Houdini로부터 정보를 얻고 제어할 수 있는 API입니다.
HOM은 Houdini의 이전 스크립팅 솔루션 인 표현 언어 및 HScript의 기능을 대체합니다.

Python에서,
Hou 패키지는 HOM을 정의하는 모듈, 기능 및 클래스의 계층 구조의 최상위입니다.
매개변수 편집기와 hython 명령줄 셸에 식을 쓸 때 hou모듈을 자동으로 가져옵니다.


+ Which Python?
  + Mac - Mac OS X에서 Houdini는 시스템의 Python을 사용합니다.
  + Windows - Windows에서, Houdini는 Houdini와 함께 설치된 Python 버전을 사용합니다.
  + Linux
    + Linux에서, Houdini는 Python 라이브러리를 검색하고, 로드할때 $PATH를 보지 않습니다.
    + 대신 $LD_LIBRARY_PATH, /lib 및 /usr/lib 에 있는 모든 경로를 검색합니다.
    + 시스템에서 적절한 Python 라이브러리를 찾을 수 없으면 $HFS 에있는 라이브러리를 사용합니다.
    + 파이썬 라이브러리가 표준 위치에 없다면 디렉토리 경로를 $LD_LIBRARY_PATH 에 추가해야합니다.

** HOM introduction
http://www.sidefx.com/docs/houdini/hom/intro.html
+ Overview
여기 Houdini에서 HOM을 사용하여 간단한 작업을 수행하는 간단한 예가 있습니다.
이 예시의 세부 사항을 이해하지 못하더라도 걱정하지 마십시오.
그것은 Houdini의 스크립팅이 어떤 것인지를 보여 줍니다.

대화형 PythonShell창을 열려면 Windows7PythonShell을 선택합니다.
#+BEGIN_SRC python :results output :exports both :noweb yes
  <<py0>>

  def print_tree(node, indent=0):
      for child in node.children():
          print " " * indent + child.name()

          print_tree(child, indent + 3)

  print_tree(hou.node('/'))
#+END_SRC

#+RESULTS:

+ Getting Started

Houdini의 Python셸을 열면,
>>> 프롬프트로 인사하고 Python 표현식이나 명령문을 입력 할 때까지 기다릴 것입니다.
커다란 파이썬 스크립트 작성을 계획하지 않더라도, 파이썬 쉘은 편리한 계산기로서 매우 중요합니다.

#+BEGIN_SRC python :results output :exports both  :noweb yes
#2+2
#0.03 * 25.1
#min(hou.frame(),7) *3
<<py0>>
hou.frame()
#+END_SRC

#+RESULTS:
: >>> >>> >>> >>> >>> >>> 1.0
: >>>


hou.frame()이란 무엇입니까?
후디니의 파이썬 API는 (Houdini)의 약자 hou라는 모듈에 구현됩니다.
그냥 os.getcwd가 os모듈의 함수인것처럼,
hou.frame은 hou 모듈의 함수이며 현재 프레임 번호를 반환합니다.
Houdini는 시작시 hou 모듈을 자동으로 가져 오기 때문에,
hou 모듈을 사용하려면 가져 오기를 작성하지 않아도됩니다.

Ctrl + D를 눌러 floating-Python쉘(hython.exe) 창을 닫으십시오.
플로팅 파이썬 쉘 창을 여는 바로 가기에 대한 기본 메뉴를 참조하십시오.

부동 창을 사용하지 않으려는 경우 Python 셸이 창 내부에있을 수 있습니다.

파이썬 셸에서 "Home-key"와 ^Ctrl + A는 줄의 처음으로 이동합니다.
"End-key"와 ^ Ctrl + E가 끝으로 이동합니다.
"업 키"및 "다운 키"는 기록을 탐색합니다.

Python 셸에서 복사하려면 ^Ctrl+C 를 사용할 수 없습니다.
Ctrl+C 는 KeyboardInterrupt 예외를 보냅니다.
파이썬 쉘에서 텍스트를 복사하려면, 마우스 오른쪽 버튼으로 클릭하고 복사를 선택하십시오.

+ Loading Hip Files
hou.hipFile 하위 모듈을 사용하여 현재 세션을 Hip 파일에 저장/로드합니다.
hou.hipFile.load ()는 파일이 성공적으로 로드 되었더라도,
경고가있는 경우 hou.LoadWarning 예외를 발생시킵니다.
다음 코드는 경고를 출력하고 나머지 스크립트를 계속 진행합니다.

#+BEGIN_SRC python :results output :exports both :noweb yes
  # Print out load warnings, but continue on a successful load.
  <<py0>>

  try:
      hou.hipFile.load("myfile.hip")
  except hou.LoadWarning, e:
      print e
#+END_SRC

#+RESULTS:
: >>> >>> >>> >>> >>> ... ... ... ...

+ Accessing Nodes
Houdini는 노드 (예: SOP, DOP, 객체 노드 등)를 중심으로 설계되었고, 스크립트로 조작할수 있습니다.
여기 시작하기위한 간단한 입문서가 있습니다.

hou.node() 함수는 노드에 대한 경로를 가져 와서 hou.Node 객체를 반환하거나,
경로가 유효하지 않으면 None을 반환합니다.



#+BEGIN_SRC python :noweb yes
  <<py0>>
  hou.hipFile.clear(True)
#+END_SRC

#+RESULTS:


http://www.sidefx.com/docs/houdini/hom/hou/hipFile.html
# True는 대화창 Yes, 인자가 없으면 대화창 튀어나옴

#+BEGIN_SRC hy :noweb yes
<<hy0>>
(hou.hipFile.clear True)
#+END_SRC

#+RESULTS:
: None


#+BEGIN_SRC hy :noweb yes
<<hy0>>
(hou.node "/obj")
#+END_SRC

#+RESULTS:
: obj

hou.node가 /obj 노드에 해당하는 hou.Node 객체를 반환했습니다.

#+BEGIN_SRC python :noweb yes  :results output :exports both
<<py0>>
hou.node('/obj')
#+END_SRC

#+RESULTS:
: >>> >>> >>> <hou.Node at /obj>
: >>>

#+BEGIN_SRC hy :noweb yes
<<hy0>>
(setv n (hou.node "/asdfasdf"))
(print n)
#+END_SRC

#+RESULTS:
: None
: None

노드 경로가 유효하지 않으므로 n은 None 객체입니다.

#+BEGIN_SRC python :noweb yes  :results output :exports both
<<py0>>
n=hou.node('/asdfasdf')
print n
#+END_SRC

#+RESULTS:
: >>> >>> >>> >>> None
: >>>

#+NAME: hy1
#+BEGIN_SRC hy :noweb yes :exports both
 <<hy0>>
;;(setv _obj (hou.node "/obj"))
;;(setv _geo (_obj.createNode "geo"))
(setv g (-> (hou.node "/obj") (.createNode "geo")))
(print g)
#+END_SRC

#+RESULTS: hy1
: geo1
: None

#+RESULTS:
: geo2

g는 새로 생성 된 /obj/geo1 노드에 해당하는 hou.Node 객체입니다.
g는 실제로 hou.ObjNode 인스턴스이며, hou.Node의 하위 클래스입니다.

#+NAME: py1
#+BEGIN_SRC python :results output :exports both  :noweb yes
<<py0>>
#hou.pwd()
g=hou.node('/obj').createNode('geo')
print g
#+END_SRC

#+RESULTS: py1
: >>> >>> >>> >>> >>> geo2
: >>>

#+BEGIN_SRC hy :noweb yes
<<hy0>>
<<hy1>>
(setv tx (g.parm "tx"))
tx
#+END_SRC

#+RESULTS:
: geo3
: <hou.Parm tx in /obj/geo3>

hou.Node 객체의 parm 메소드는 hou.Parm 객체를 반환합니다.
(매개 변수 이름이 유효하지 않으면 None(없음)).

#+BEGIN_SRC python :results output :exports both :noweb yes
  <<py0>>
  <<py1>>
  tx = g.parm('tx')
  tx
#+END_SRC

#+RESULTS:
: >>> >>> >>> >>> >>> >>> >>> geo4
: >>> >>> <hou.Parm tx in /obj/geo4>
: >>>


+ Parm 객체를 레퍼런스하고 평가(evaluation)함
#+BEGIN_SRC hy :noweb yes
<<hy0>>
<<hy1>>
(setv tx (g.parm "tx"))
(-> tx .eval)
#+END_SRC

#+RESULTS:
: geo5
: 0.0


#+BEGIN_SRC python :results output :exports both :noweb yes
  <<py0>>
  <<py1>>
  tx = g.parm('tx')
  tx.eval()
#+END_SRC

#+RESULTS:

+ Parm 값을 (set)바꾸고 계산해본다.
#+BEGIN_SRC hy :noweb yes
<<hy0>>
<<hy1>>
(setv tx (g.parm "tx"))
(-> tx (.set 3.5))
(-> tx (.eval))
#+END_SRC

#+RESULTS:
: geo1
: 3.5

#+BEGIN_SRC python :results output :exports both :noweb yes
  <<py0>>
  <<py1>>
  tx = g.parm('tx')
  tx.set(3.5)
  tx.eval()
#+END_SRC

#+RESULTS:
: >>> >>> >>> >>> >>> >>> >>> geo10
: >>> >>> >>> 3.5
: >>>

+ 객체에 바로 접근해 계산
#+BEGIN_SRC hy :noweb yes
<<hy0>>
(-> (hou.node "/obj/geo10") (.parm "tx") (.eval))
#+END_SRC

#+RESULTS:
: 3.5

#+BEGIN_SRC python :results output :exports both :noweb yes
<<py0>>
hou.node('/obj/geo10').parm('tx').eval()
#+END_SRC

#+RESULTS:
: >>> >>> >>> 3.5
: >>>

+ hou.parm 은 직접 (parm에 액세스)하는 바로가기 함수입니다.
#+BEGIN_SRC hy :noweb yes
<<hy0>>
(-> (hou.parm "/obj/geo10/tx") (.eval))
#+END_SRC

#+RESULTS:
: 3.5

#+BEGIN_SRC python :results output :exports both :noweb yes
<<py0>>
hou.parm('/obj/geo10/tx').eval()
#+END_SRC

#+RESULTS:
: >>> >>> >>> 3.5
: >>>

+ hou.evalParm은 (parm eval까지 액세스: 더짧은) 바로 가기입니다.
#+BEGIN_SRC hy :noweb yes
<<hy0>>
(hou.evalParm "/obj/geo10/tx")
#+END_SRC

#+RESULTS:
: 3.5

#+BEGIN_SRC python :results output :exports both :noweb yes
<<py0>>
hou.evalParm('/obj/geo10/tx')
#+END_SRC

#+RESULTS:
: >>> >>> >>> 3.5
: >>>

+ hou.ch는 hou.evalParm과 정확히 동일합니다.
#+BEGIN_SRC hy :noweb yes
<<hy0>>
(hou.ch "/obj/geo10/tx")
#+END_SRC

#+RESULTS:
: 3.5

+ hou.Parm.name()은 매개변수의 이름을 반환, hou.Node.parms()는 모든 노드의 매개변수튜플을 반환.

https://github.com/hylang/hy/blob/master/docs/tutorial.rst

#+BEGIN_SRC hy :noweb yes
<<hy0>>
(setv g (-> (hou.node "/obj") (.createNode "geo"))) ;; < hy1 >
(list-comp (.name p) (p (g.parms)))
#+END_SRC

#+RESULTS:
: ['stdswitcher1', 'xOrd', 'rOrd', 'tx', 'ty', 'tz', 'rx', 'ry', 'rz', 'sx', 'sy', 'sz', 'px', 'py', 'pz', 'prx', 'pry', 'prz', 'scale', 'pre_xform', 'keeppos', 'childcomp', 'constraints_on', 'constraints_path', 'lookatpath', 'lookupobjpath', 'lookup', 'pathobjpath', 'roll', 'pos', 'uparmtype', 'pathorient', 'upx', 'upy', 'upz', 'bank', 'shop_materialpath', 'shop_materialopts', 'tdisplay', 'display', 'use_dcolor', 'dcolorr', 'dcolorg', 'dcolorb', 'picking', 'pickscript', 'caching', 'vport_shadeopen', 'vport_displayassubdiv', 'vport_onionskin', 'stdswitcher41', 'viewportlod', 'vm_rendervisibility', 'vm_rendersubd', 'vm_subdstyle', 'vm_subdgroup', 'vm_osd_quality', 'vm_osd_vtxinterp', 'vm_osd_fvarinterp', 'folder01', 'categories', 'reflectmask', 'refractmask', 'lightmask', 'lightcategories', 'vm_volumefilter', 'vm_volumefilterwidth', 'vm_matte', 'vm_rayshade', 'geo_velocityblur', 'vm_shadingquality', 'vm_flatness', 'vm_raypredice', 'vm_curvesurface', 'vm_rmbackface', 'shop_geometrypath', 'vm_forcegeometry', 'vm_rendersubdcurves', 'vm_renderpoints', 'vm_renderpointsas', 'vm_usenforpoints', 'vm_pointscale', 'vm_pscalediameter', 'vm_metavolume', 'vm_coving', 'vm_materialoverride', 'vm_overridedetail', 'vm_procuseroottransform']

#+BEGIN_SRC python :results output :exports both :noweb yes
<<py0>>
g=hou.node("/obj").createNode("geo")
[p.name() for p in g.parms()]
#+END_SRC

#+RESULTS:
: >>> >>> >>> >>> ['stdswitcher1', 'xOrd', 'rOrd', 'tx', 'ty', 'tz', 'rx', 'ry', 'rz', 'sx', 'sy', 'sz', 'px', 'py', 'pz', 'prx', 'pry', 'prz', 'scale', 'pre_xform', 'keeppos', 'childcomp', 'constraints_on', 'constraints_path', 'lookatpath', 'lookupobjpath', 'lookup', 'pathobjpath', 'roll', 'pos', 'uparmtype', 'pathorient', 'upx', 'upy', 'upz', 'bank', 'shop_materialpath', 'shop_materialopts', 'tdisplay', 'display', 'use_dcolor', 'dcolorr', 'dcolorg', 'dcolorb', 'picking', 'pickscript', 'caching', 'vport_shadeopen', 'vport_displayassubdiv', 'vport_onionskin', 'stdswitcher41', 'viewportlod', 'vm_rendervisibility', 'vm_rendersubd', 'vm_subdstyle', 'vm_subdgroup', 'vm_osd_quality', 'vm_osd_vtxinterp', 'vm_osd_fvarinterp', 'folder01', 'categories', 'reflectmask', 'refractmask', 'lightmask', 'lightcategories', 'vm_volumefilter', 'vm_volumefilterwidth', 'vm_matte', 'vm_rayshade', 'geo_velocityblur', 'vm_shadingquality', 'vm_flatness', 'vm_raypredice', 'vm_curvesurface', 'vm_rmbackface', 'shop_geometrypath', 'vm_forcegeometry', 'vm_rendersubdcurves', 'vm_renderpoints', 'vm_renderpointsas', 'vm_usenforpoints', 'vm_pointscale', 'vm_pscalediameter', 'vm_metavolume', 'vm_coving', 'vm_materialoverride', 'vm_overridedetail', 'vm_procuseroottransform']
: >>>


hou.ParmTuple 은 매개변수를 그룹핑한 객체다.
#+BEGIN_SRC hy :noweb yes
<<hy0>>
<<hy1>>
(setv t (g.parmTuple "t"))
t
#+END_SRC

#+RESULTS:
: geo16
: <hou.ParmTuple t in /obj/geo16>


#+BEGIN_SRC python :results output :exports both :noweb yes
<<py0>>
<<py1>>
t=g.parmTuple('t')
t
#+END_SRC

#+RESULTS:
: >>> >>> >>> >>> >>> >>> >>> geo17
: >>> >>> <hou.ParmTuple t in /obj/geo17>
: >>>

+ hou.ParmTuple 그룹을 정말로 (요소=튜플)튜플객체들을 나열
#+BEGIN_SRC hy :noweb yes
<<hy0>>
<<hy1>>
(setv t (g.parmTuple "t"))
(tuple t)
#+END_SRC

#+RESULTS:
: geo18
: (<hou.Parm tx in /obj/geo18>, <hou.Parm ty in /obj/geo18>, <hou.Parm tz in /obj/geo18>)


#+BEGIN_SRC python :results output :exports both :noweb yes
<<py0>>
<<py1>>
t=g.parmTuple('t')
tuple(t)
#+END_SRC

#+RESULTS:
: >>> >>> >>> >>> >>> >>> >>> geo19
: >>> >>> (<hou.Parm tx in /obj/geo19>, <hou.Parm ty in /obj/geo19>, <hou.Parm tz in /obj/geo19>)
: >>>

+ 튜플객체(ParmTuple)을 연산(eval)해서... 즉, 뭔값인지 확인하기
#+BEGIN_SRC hy :noweb yes
<<hy0>>
<<hy1>>
(-> (g.parmTuple "t") .eval)
#+END_SRC


#+RESULTS:
: geo21
: (0.0, 0.0, 0.0)

#+BEGIN_SRC python :results output :exports both :noweb yes
<<py0>>
<<py1>>
t=g.parmTuple('t') # tuple object
t.eval()
#+END_SRC

#+RESULTS:
: >>> >>> >>> >>> >>> >>> >>> geo1
: >>> >>> (0.0, 0.0, 0.0)
: >>>


+ 간단한 sop 네트워크를 구축하십시오.
;; *line* : 중복을 피하기 위해 노드 타일을 이동하십시오.
https://github.com/hylang/hy/blob/master/docs/tutorial.rst#hy-is-a-lisp-flavored-python
맨밑코드 explicit argument set
#+BEGIN_SRC hy :noweb yes
<<hy0>>
(hou.hipFile.clear True)
(setv geo (-> (hou.node "/obj") (.createNode "geo")))
(setv box (geo.createNode "box"))
(setv subd (geo.createNode "subdivide"))
(-> subd (.parm "iterations") (.set 3))
(-> subd (.setFirstInput box))
(-> subd (.moveToGoodPosition)) ;; *line* : Move the node tiles to avoid overlaps.
(-> subd (.setDisplayFlag True))
(-> subd (.setRenderFlag True))
(-> subd (.setCurrent True :clear_all_selected True))
#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC python :results output :exports both :noweb yes
<<py0>>
# Build a simple sop network.
hou.hipFile.clear(True)
geo = hou.node('/obj').createNode('geo')
box = geo.createNode('box')
subd = geo.createNode('subdivide')
subd.parm('iterations').set(3)
subd.setFirstInput(box)
subd.moveToGoodPosition() # Move the node tiles to avoid overlaps.
subd.setDisplayFlag(True)
subd.setRenderFlag(True)
subd.setCurrent(True, clear_all_selected=True)

#+END_SRC

#+RESULTS:
: >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> <hou.Vector2 [0, 0]>
: >>> >>> >>> >>>

* 애니메이션 매개변수 및 키프레임 작업
'애니메이션 매개변수'라는 용어를 들으면,
일반적으로 /키프레임 값과/ 베지어 곡선/ 및 애니메이션 그래프 편집기를 생각한다.
앞에서 언급했듯이, 표현식이있는 매개변수도 애니메이션 매개변수로 간주됩니다.
모든 애니메이션 매개변수에는 하나 이상의 키 프레임이 있고, 각 키 프레임에는 표현식이 있습니다.
expression이있는 일반적인 매개변수에는
sin($F) 또는 cos(time())과 같은식의 키프레임 하나가 있습니다.
일반적인 애니메이션 커브에는 bezier()와 같은 expression이있는 여러 개의 키 프레임이 있습니다.

그러면 "bezier()"와 같은 함수가 다른 시간에 다른 값을 구하는 방법은 무엇입니까?
분명히 수시로 변하는 "bezier()"에, 매개변수(data)가 전달되지 않았으므로,
전달된 "키프레임" 또는 "slope(경사)값"이 없습니다.
답은 "키프레임"이 단순한 expression 이상의 것을 저장한다는 것입니다.
키프레임은 이러한 값, "(경사)기울기" 및 "가속"을 저장하며,
"베지어"와 같은 특정 기능은 현재 "키프레임"과 그 다음 키프레임에 대한 값에 액세스합니다.
"sin($F)"과 같은 expression이 있는 키프레임의 경우,
이러한 추가값(extra value)은 설정되지 않고 사용되지 않습니다.

각 키프레임에는 연결된 시간이 있습니다.
그 시간과 초당 프레임 수를 사용하여, 키프레임의 프레임을 파생시킬 수 있습니다.
expression이 키프레임간에 활성화된 것으로 생각할 수 있습니다:
Houdini는 키프레임과 다음 키프레임 사이의 표현식을 평가합니다.
다음 키 프레임이 없으면,
대부분의 애니메이션 기능 (예: bezier, cubic 등)은 단순히 키 프레임의 값으로 평가됩니다.
첫번째 키프레임 이전 시간의 경우, 매개변수는 첫번째 키프레임 시간의 값으로 계산됩니다.

hou.Parm.keyframes() values, slopes, and accelerations

1. in값(v)을 설정하고 out값()은 설정되지 않은경우, 동일한 값으로 설정됩니다. In 값을 설정하면 값 사이의 연결이 끊어집니다. in값 또는 out값 중 어느 것도 설정되지 않은 경우, 값은 연결된 것으로 간주됩니다.
이거 무슨 개소리야;;;
http://www.sidefx.com/docs/houdini/hom/hou/Parm.html#keyframes
이 매개변수의 키프레임을 반환합니다.

http://www.sidefx.com/docs/houdini/hom/hou/BaseKeyframe.html

2. 예를 들어, 키 프레임을~~ '현재값'과 '기울기'로 설정하려면, keyframe에서 값이나 기울기를 설정하지 마십시오.
3. 또는, 기울기를 자동으로 결정하려면, 기울기가 설정되지 않은 키프레임을 설정하십시오.
4. times and expressions
5. in and out/values
6. tied values (묶인값)
7. asCode()
8. Hscript 표현식과 Python 간의 동일한 구문

** Working with Objects and Transformations

#+BEGIN_SRC python :results output :exports both :noweb yes
#+END_SRC
#+BEGIN_SRC python :results output :exports both :noweb yes
#+END_SRC
#+BEGIN_SRC python :results output :exports both :noweb yes
#+END_SRC
#+BEGIN_SRC python :results output :exports both :noweb yes
#+END_SRC
#+BEGIN_SRC python :results output :exports both :noweb yes
#+END_SRC
#+BEGIN_SRC python :results output :exports both :noweb yes
#+END_SRC
#+BEGIN_SRC python :results output :exports both :noweb yes
#+END_SRC
#+BEGIN_SRC python :results output :exports both :noweb yes
#+END_SRC
#+BEGIN_SRC python :results output :exports both :noweb yes
#+END_SRC
#+BEGIN_SRC python :results output :exports both :noweb yes
#+END_SRC
